{"version":3,"sources":["components/Trends.js","components/TopHead.js","App.js","reportWebVitals.js","index.js"],"names":["Trends","octokit","Octokit","useState","sort","order","setOrder","data","setData","isLoading","setIsLoading","useEffect","request","q","then","resp","console","log","items","catch","error","onChange","e","target","value","map","row","index","archive_url","style","textDecoration","href","forks_url","full_name","description","TopHead","class","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAyDeA,EAtDA,WACb,IAAMC,EAAU,IAAIC,IACpB,EAAeC,mBAAS,SAAjBC,EAAP,oBACA,EAA0BD,mBAAS,QAAnC,mBAAOE,EAAP,KAAcC,EAAd,KACA,EAAwBH,mBAAS,IAAjC,mBAAOI,EAAP,KAAaC,EAAb,KACA,EAAkCL,oBAAS,GAA3C,mBAAOM,EAAP,KAAkBC,EAAlB,KAcA,OAZAC,qBAAU,WACRV,EAAQW,QAAQ,2BAA4B,CAC1CC,EAAG,IACHT,KAAMA,EACNC,MAAOA,IACNS,MAAK,SAACC,GACPC,QAAQC,IAAIF,EAAKR,KAAKW,OACtBV,EAAQO,EAAKR,KAAKW,OAClBR,GAAa,MACZS,OAAM,SAAAC,GAAK,OAAIJ,QAAQC,IAAIG,SAI9B,gCACGX,GAAa,qDACd,yBAAQY,SAAU,SAACC,GAAQhB,EAASgB,EAAEC,OAAOC,QAA7C,UACE,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,MAAd,oBAEF,yBAAQH,SAAU,SAACC,GAAQhB,EAASgB,EAAEC,OAAOC,QAA7C,UACE,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,QAAd,mBACA,wBAAQA,MAAM,qBAAd,mCAIDjB,EAAKkB,KAAI,SAACC,EAAKC,GAAN,OACR,8BACGD,EAAIE,aACH,qCACE,gCACE,oBAAIC,MAAO,CAAEC,eAAgB,aAA7B,SACE,mBAAGC,KAAML,EAAIM,UAAb,SACGN,EAAIO,cAGT,4BAAIP,EAAIQ,iBAEV,2BAXIP,UCvBHQ,EAZC,kBACd,qBAAKC,MAAM,mCAAX,SACE,sBAAKA,MAAM,6CAAX,UACE,oBAAIA,MAAM,KAAV,sBAEA,mBAAGA,MAAM,2CAAT,8ECMSC,MATf,WACE,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f3e33e6d.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Octokit } from \"@octokit/core\";\n\nconst Trends = function () {\n  const octokit = new Octokit();\n  const [sort] = useState('stars');\n  const [order, setOrder] = useState('desc');\n  const [data, setData] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    octokit.request(\"GET /search/repositories\", {\n      q: 'q',\n      sort: sort,\n      order: order,\n    }).then((resp) => {\n      console.log(resp.data.items)\n      setData(resp.data.items)\n      setIsLoading(false);\n    }).catch(error => console.log(error));\n  })\n\n  return (\n    <div>\n      {isLoading && <p>Wait I'm Loading....</p>}\n      <select onChange={(e) => { setOrder(e.target.value)}}>\n        <option value=\"desc\">desc</option>\n        <option value=\"asc\">asc</option>\n      </select>\n      <select onChange={(e) => { setOrder(e.target.value)}}>\n        <option value=\"stars\">stars</option>\n        <option value=\"forks\">forks</option>\n        <option value=\"help-wanted-issues\">help-wanted-issues</option>\n\n      </select>\n\n      {data.map((row, index) => (\n        <div key={index}>\n          {row.archive_url && (\n            <>\n              <div>\n                <h2 style={{ textDecoration: \"Underline\" }}>\n                  <a href={row.forks_url}>\n                    {row.full_name}\n                  </a>\n                </h2>\n                <p>{row.description}</p>\n              </div>\n              <hr />\n            </>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Trends","import React from \"react\";\n\nconst TopHead = () => (\n  <div class=\"color-bg-secondary border-bottom\">\n    <div class=\"container-lg p-responsive text-center py-6\">\n      <h1 class=\"h1\">Trending</h1>\n\n      <p class=\"f4 color-text-secondary col-md-6 mx-auto\">\n        See what the GitHub community is most excited about today.\n      </p>\n    </div>\n  </div>\n)\n\nexport default TopHead","import './App.css';\nimport Trends from './components/Trends';\nimport TopHead from './components/TopHead';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TopHead />\n      <Trends/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}